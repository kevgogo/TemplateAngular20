#!/usr/bin/env sh

# Evitar procesar merges, squash, etc.
[ "$2" = "merge" ] && exit 0
[ "$2" = "squash" ] && exit 0
[ "$2" = "revert" ] && exit 0

MSG_FILE="$1"

# Verificar que el archivo existe
[ ! -f "$MSG_FILE" ] && exit 0

# Obtener informaci√≥n b√°sica
BRANCH=$(git rev-parse --abbrev-ref HEAD 2>/dev/null || echo "main")
TICKET=$(echo "$BRANCH" | grep -o '[A-Z][A-Z]*-[0-9][0-9]*' | head -1)

# Obtener listas de archivos (usando here-strings en lugar de pipes)
ADDED_FILES=$(git diff --cached --name-only --diff-filter=A 2>/dev/null)
MODIFIED_FILES=$(git diff --cached --name-only --diff-filter=M 2>/dev/null)
DELETED_FILES=$(git diff --cached --name-only --diff-filter=D 2>/dev/null)
RENAMED_FILES=$(git diff --cached --name-status --diff-filter=R 2>/dev/null)

# Contar archivos
ADDED=$(echo "$ADDED_FILES" | grep -c '^' 2>/dev/null || echo 0)
MODIFIED=$(echo "$MODIFIED_FILES" | grep -c '^' 2>/dev/null || echo 0)
DELETED=$(echo "$DELETED_FILES" | grep -c '^' 2>/dev/null || echo 0)
RENAMED=$(echo "$RENAMED_FILES" | grep -c '^' 2>/dev/null || echo 0)

# Ajustar contadores para archivos vac√≠os
[ -z "$ADDED_FILES" ] && ADDED=0
[ -z "$MODIFIED_FILES" ] && MODIFIED=0
[ -z "$DELETED_FILES" ] && DELETED=0
[ -z "$RENAMED_FILES" ] && RENAMED=0

# Detectar tipo por rama
TYPE="chore"
case "$BRANCH" in
  feat/*|feature/*) TYPE="feat" ;;
  fix/*|hotfix/*|bugfix/*) TYPE="fix" ;;
  docs/*|doc/*) TYPE="docs" ;;
  style/*|styles/*) TYPE="style" ;;
  refactor/*) TYPE="refactor" ;;
  test/*|tests/*) TYPE="test" ;;
  build/*) TYPE="build" ;;
  ci/*) TYPE="ci" ;;
esac

# Detectar scope b√°sico por archivos
SCOPE=""
ALL_FILES="$ADDED_FILES $MODIFIED_FILES"
if echo "$ALL_FILES" | grep -q "src/components/"; then
  SCOPE="(components)"
elif echo "$ALL_FILES" | grep -q "src/api/\|src/services/"; then
  SCOPE="(api)"
elif echo "$ALL_FILES" | grep -q "src/utils/"; then
  SCOPE="(utils)"
elif echo "$ALL_FILES" | grep -q "package.json\|yarn.lock\|package-lock.json"; then
  SCOPE="(deps)"
fi

# Construir contadores
COUNTERS=""
[ "$ADDED" -gt 0 ] && COUNTERS="+$ADDED"
[ "$MODIFIED" -gt 0 ] && COUNTERS="$COUNTERS${COUNTERS:+,}~$MODIFIED"
[ "$DELETED" -gt 0 ] && COUNTERS="$COUNTERS${COUNTERS:+,}-$DELETED"
[ "$RENAMED" -gt 0 ] && COUNTERS="$COUNTERS${COUNTERS:+,}‚Üí$RENAMED"

# Leer mensaje existente (solo la primera l√≠nea)
EXISTING_MSG=$(head -1 "$MSG_FILE" 2>/dev/null | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')

# Construir t√≠tulo
if echo "$EXISTING_MSG" | grep -q "^[a-z]*:"; then
  # Ya es conventional commit, mantener estructura
  NEW_TITLE="$EXISTING_MSG"
else
  # Crear nuevo t√≠tulo conventional
  SUBJECT="${EXISTING_MSG:-"actualizar archivos"}"
  if [ -n "$TICKET" ]; then
    NEW_TITLE="$TYPE$SCOPE: [$TICKET] $SUBJECT"
  else
    NEW_TITLE="$TYPE$SCOPE: $SUBJECT"
  fi
fi

# Agregar contadores al t√≠tulo
if [ -n "$COUNTERS" ]; then
  # Eliminar contadores existentes si los hay
  NEW_TITLE=$(echo "$NEW_TITLE" | sed 's/ ([+~‚Üí-][^)]*)$//')
  NEW_TITLE="$NEW_TITLE ($COUNTERS)"
fi

# Construir secciones de archivos
FILES_SECTIONS=""

if [ "$ADDED" -gt 0 ]; then
  FILES_SECTIONS="$FILES_SECTIONS

### ‚ú® Archivos agregados ($ADDED):"
  echo "$ADDED_FILES" | while IFS= read -r file; do
    [ -n "$file" ] && echo "  - $file"
  done | {
    while IFS= read -r line; do
      FILES_SECTIONS="$FILES_SECTIONS
$line"
    done
  }
fi

if [ "$MODIFIED" -gt 0 ]; then
  FILES_SECTIONS="$FILES_SECTIONS

### üîß Archivos modificados ($MODIFIED):"
  echo "$MODIFIED_FILES" | while IFS= read -r file; do
    [ -n "$file" ] && echo "  - $file"
  done | {
    while IFS= read -r line; do
      FILES_SECTIONS="$FILES_SECTIONS
$line"
    done
  }
fi

if [ "$DELETED" -gt 0 ]; then
  FILES_SECTIONS="$FILES_SECTIONS

### üóëÔ∏è Archivos eliminados ($DELETED):"
  echo "$DELETED_FILES" | while IFS= read -r file; do
    [ -n "$file" ] && echo "  - $file"
  done | {
    while IFS= read -r line; do
      FILES_SECTIONS="$FILES_SECTIONS
$line"
    done
  }
fi

if [ "$RENAMED" -gt 0 ]; then
  FILES_SECTIONS="$FILES_SECTIONS

### üìù Archivos renombrados ($RENAMED):"
  echo "$RENAMED_FILES" | while IFS= read -r line; do
    if [ -n "$line" ]; then
      old_file=$(echo "$line" | cut -f2)
      new_file=$(echo "$line" | cut -f3)
      echo "  - $old_file ‚Üí $new_file"
    fi
  done | {
    while IFS= read -r line; do
      FILES_SECTIONS="$FILES_SECTIONS
$line"
    done
  }
fi

# Construir mensaje completo usando un m√©todo m√°s confiable
{
  echo "$NEW_TITLE"
  echo ""
  
  TOTAL=$((ADDED + MODIFIED + DELETED + RENAMED))
  if [ "$TOTAL" -gt 0 ]; then
    echo "## üìä Resumen: $TOTAL archivo(s) afectado(s)"
    [ "$ADDED" -gt 0 ] && echo "- ‚ú® **$ADDED** agregado(s)"
    [ "$MODIFIED" -gt 0 ] && echo "- üîß **$MODIFIED** modificado(s)"
    [ "$DELETED" -gt 0 ] && echo "- üóëÔ∏è **$DELETED** eliminado(s)"
    [ "$RENAMED" -gt 0 ] && echo "- üìù **$RENAMED** renombrado(s)"
    echo ""
  fi
  
  # Listar archivos si hay pocos (para evitar mensajes muy largos)
  if [ "$TOTAL" -le 10 ] && [ "$TOTAL" -gt 0 ]; then
    echo "## üìã Archivos modificados"
    
    if [ "$ADDED" -gt 0 ]; then
      echo ""
      echo "**‚ú® Agregados:**"
      echo "$ADDED_FILES" | sed 's/^/- /'
    fi
    
    if [ "$MODIFIED" -gt 0 ]; then
      echo ""  
      echo "**üîß Modificados:**"
      echo "$MODIFIED_FILES" | sed 's/^/- /'
    fi
    
    if [ "$DELETED" -gt 0 ]; then
      echo ""
      echo "**üóëÔ∏è Eliminados:**"
      echo "$DELETED_FILES" | sed 's/^/- /'
    fi
    
    echo ""
  fi
  
  echo "## üéØ Descripci√≥n"
  echo ""
  echo "<!-- Describe brevemente los cambios realizados -->"
  echo ""
  echo "## ‚úÖ Checklist"
  echo "- [ ] Cambios probados localmente"
  echo "- [ ] Documentaci√≥n actualizada (si aplica)"
  echo "- [ ] Tests a√±adidos/actualizados (si aplica)"
  echo ""
  
  if [ -n "$TICKET" ]; then
    echo "**Refs:** $TICKET"
  fi
  
} > "$MSG_FILE"

exit 0