# --- Etapa 1: Build (Compilación) ---
# Usamos una imagen de Node.js con la versión más reciente para la compilación.
FROM node:20 AS build

# Establecemos el directorio de trabajo dentro del contenedor.
WORKDIR /app

# Copiamos los archivos de package.json y package-lock.json para instalar las dependencias primero.
# Esto permite que Docker cachee esta capa si los archivos no cambian.
COPY package.json package-lock.json ./

# Instalamos las dependencias.
# --legacy-peer-deps puede ser necesario en algunos casos.
RUN npm install

# Copiamos el resto del código de la aplicación.
COPY . .

# Compilamos la aplicación de Angular para producción.
# El flag --output-path especifica el directorio de salida de la compilación.
# --configuration=production asegura que se usen las configuraciones de producción.
RUN npm run build -- --configuration=production --output-path=/usr/share/nginx/html

# --- Etapa 2: Serve (Servir la aplicación) ---
# Usamos una imagen de Nginx "slim" (delgada) para servir los archivos estáticos.
# Esta imagen es mucho más pequeña que la de Node.js.
FROM nginx:alpine

# Copiamos la configuración de Nginx para servir la aplicación de Angular.
# Vamos a crear este archivo a continuación.
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copiamos los archivos estáticos compilados desde la etapa 'build' a la ubicación de Nginx.
COPY --from=build /usr/share/nginx/html /usr/share/nginx/html

# Exponemos el puerto por defecto de Nginx.
EXPOSE 80

# Comando para iniciar Nginx.
CMD ["nginx", "-g", "daemon off;"]